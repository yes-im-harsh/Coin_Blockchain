// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract hadcoin{
    
    uint public total_hadcoin = 100000;
    
    uint public usd_to_hadcoin =1000;
    
    uint public intial_hadcoin = 0;
    
    mapping(address => uint) equity_hadcoin;
    mapping(address => uint) equity_usd;
    
    modifier can_buy_hadcoin(uint usd_invested){
        require(usd_invested * usd_to_hadcoin + intial_hadcoin <= total_hadcoin );
        _;
    }
    
    function equity_in_hadcoin (address investor) external view returns (uint){
        return equity_hadcoin[investor];
    }
    
    function equity_in_usd(address investor) external view returns(uint){
        return equity_usd[investor];
    }
    
    //Buy Hadcoin.
    function buy_hadcoion(address investor, uint usd_invested) external
    can_buy_hadcoin(usd_invested){
        uint brought_hadcoin = usd_invested * usd_to_hadcoin;
        equity_hadcoin[investor] += brought_hadcoin;
        equity_usd[investor] = equity_hadcoin[investor] /1000;
        intial_hadcoin += brought_hadcoin;
    }
    
    //Sell Hadcoins.
    function sell_hadcoin(address investor, uint hadcoin_sold) external{
        equity_hadcoin[investor] -= hadcoin_sold;
        equity_usd[investor] = equity_hadcoin[investor] /1000;
        intial_hadcoin -= hadcoin_sold;
    }
}
